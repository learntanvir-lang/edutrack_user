/**
 * @fileoverview Firestore Security Rules for EduTrack application.
 *
 * Core Philosophy:
 * This ruleset provides public read access while restricting write access to authenticated users who own the data. It enforces user-ownership on documents, ensuring that only the authenticated user matching the 'uid' field in the document can create, update, or delete it.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  The `userId` segment must match the `id` field within the document.
 * - /users/{userId}/subjects: Stores subjects belonging to a specific user.
 * - /users/{userId}/exams: Stores exams belonging to a specific user.
 *
 * Key Security Decisions:
 * - Public read access is granted to all collections.
 * - User listing is implicitly denied.
 * - Write access is strictly controlled by user ID ownership.
 * - Unspecified collections are denied all access.
 *
 * Denormalization for Authorization:
 * The 'uid' field is required within each document to match the authenticated user's `auth.uid`. This denormalization avoids costly `get()` calls to other documents and enables efficient ownership checks within the rules.  This is validated during `create` and enforced as immutable during `update`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access controls.  All collections outside of those explicitly defined are denied all access.
     * @path /databases/{database}/documents
     * @allow N/A
     * @deny N/A
     * @principle Denies all access to unspecified collections to enforce a default-deny security posture.
     */
    match /{document=**} {
      allow read: if true;
      allow write: if false;
    }

    /**
     * @description Manages user profile information. Only the authenticated user can create their own profile, and update or delete it later.
     * @path /users/{userId}
     * @allow (create) request.auth != null && request.resource.data.id == request.auth.uid
     * @allow (get, list) true
     * @allow (update, delete) request.auth != null && resource.data.id == request.auth.uid
     * @deny (create) request.auth == null
     * @deny (update, delete) request.auth == null || resource.data.id != request.auth.uid
     * @principle Enforces document ownership for writes and validates relational integrity between the path and document data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages subjects for a specific user. Only the authenticated user can create, update, or delete subjects under their user ID.
      * @path /users/{userId}/subjects/{subjectId}
      * @allow (create) request.auth != null && request.resource.data.id == request.auth.uid
      * @allow (get, list) true
      * @allow (update, delete) request.auth != null && resource.data.id == request.auth.uid
      * @deny (create) request.auth == null
      * @deny (update, delete) request.auth == null || resource.data.id != request.auth.uid
      * @principle Enforces document ownership for writes and validates relational integrity between the path and document data.
      */
    match /users/{userId}/subjects/{subjectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages exams for a specific user. Only the authenticated user can create, update, or delete exams under their user ID.
     * @path /users/{userId}/exams/{examId}
     * @allow (create) request.auth != null && request.resource.data.id == request.auth.uid
     * @allow (get, list) true
     * @allow (update, delete) request.auth != null && resource.data.id == request.auth.uid
     * @deny (create) request.auth == null
     * @deny (update, delete) request.auth == null || resource.data.id != request.auth.uid
     * @principle Enforces document ownership for writes and validates relational integrity between the path and document data.
     */
    match /users/{userId}/exams/{examId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}